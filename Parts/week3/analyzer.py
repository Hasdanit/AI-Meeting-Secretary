import google.generativeai as genai
import os
from dotenv import load_dotenv
from docx import Document
from datetime import datetime
import re
from notion_integration import add_task_to_notion

load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("–û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-1.5-flash")

def analyze_text(text: str):
    prompt = (
        "–¢—ã –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ –≤—ã–¥–µ–ª–∏:\n"
        "1. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏.\n"
        "2. –•—Ä–æ–Ω–æ–ª–æ–≥–∏—é –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö —Ç–µ–º (—Ç–∞–π–º–ª–∞–π–Ω, –ø–æ –º–∏–Ω—É—Ç–∞–º).\n"
        "3. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (action items).\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "–†–µ–∑—é–º–µ:\n[—Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ]\n\n"
        "–¢–∞–π–º–ª–∞–π–Ω:\n- [–≤—Ä–µ–º—è] - [—Ç–µ–º–∞]\n\n"
        "–ó–∞–¥–∞—á–∏:\n- [–∑–∞–¥–∞—á–∞]\n\n"
        "–¢–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:\n" + text
    )

    try:
        response = model.generate_content(prompt)
        analysis = response.text

        summary = re.search(r'–†–µ–∑—é–º–µ:\s*(.*?)\s*–¢–∞–π–º–ª–∞–π–Ω:', analysis, re.DOTALL).group(1).strip()
        timeline = re.search(r'–¢–∞–π–º–ª–∞–π–Ω:\s*(.*?)\s*–ó–∞–¥–∞—á–∏:', analysis, re.DOTALL).group(1).strip()
        tasks = re.search(r'–ó–∞–¥–∞—á–∏:\s*(.*)', analysis, re.DOTALL).group(1).strip().split('\n')

        return summary, timeline, tasks
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None, None, None

def save_to_docx(filename_base: str, summary: str, timeline: str, tasks: list, raw_text: str):
    doc = Document()
    doc.add_heading("–û—Ç—á—ë—Ç –ø–æ –≤—Å—Ç—Ä–µ—á–µ", level=0)
    doc.add_paragraph(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    doc.add_heading("üîπ –†–µ–∑—é–º–µ:", level=1)
    doc.add_paragraph(summary)
    doc.add_heading("üîπ –¢–∞–π–º–ª–∞–π–Ω:", level=1)
    doc.add_paragraph(timeline)
    doc.add_heading("üîπ –ó–∞–¥–∞—á–∏:", level=1)
    for task in tasks:
        doc.add_paragraph(task, style='List Bullet')
    doc.add_heading("üîπ –ü–æ–ª–Ω–∞—è —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞:", level=1)
    doc.add_paragraph(raw_text)

    output_path = os.path.join("recordings", f"{filename_base}.docx")
    doc.save(output_path)
    print(f"[‚úî] Word-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

    for task in tasks:
        add_task_to_notion(task.strip('- ').strip())